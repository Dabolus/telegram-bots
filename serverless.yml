org: dabolus
app: ${env:SERVICE_NAME}
service: ${env:SERVICE_NAME}
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  memorySize: 768
  timeout: 28
  environment:
    NODE_OPTIONS: --enable-source-maps
    API_GATEWAY_BASE_URL:
      Fn::Join:
        - ''
        - - 'https://'
          - Ref: HttpApi
          - '.execute-api.'
          - Ref: AWS::Region
          - '.amazonaws.com'
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            Fn::GetAtt:
              - CacheTable
              - Arn

plugins:
  - serverless-esbuild
  - serverless-s3-sync
  - serverless-lift

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    plugins: esbuild-plugins.cjs
    packager: yarn
    exclude:
      - '@sparticuz/chromium'
      - sharp
  s3Sync:
    - bucketName: ${env:SERVICE_NAME}-assets
      localDir: assets
      acl: public-read

package:
  individually: true

layers:
  chromium:
    path: layers/chromium/build
  ffmpeg:
    path: layers/ffmpeg/build
  sharp:
    path: layers/sharp/build

functions:
  broker:
    handler: bots/broker/src/index.handler
    environment:
      ENABLE_ANALYTICS: ${env:ENABLE_ANALYTICS}
      ANALYTICS_API_SECRET: ${env:ANALYTICS_API_SECRET}
      ANALYTICS_MEASUREMENT_ID: ${env:ANALYTICS_MEASUREMENT_ID}
      CHATTGB_BOT_TOKEN: ${env:CHATTGB_BOT_TOKEN}
      CHATTGB_QUEUE_URL: ${construct:chattgb.queueUrl}
      DABBEXT_BOT_TOKEN: ${env:DABBEXT_BOT_TOKEN}
      DABBEXT_QUEUE_URL: ${construct:dabbext.queueUrl}
      QUOTE_GENERATOR_BOT_TOKEN: ${env:QUOTE_GENERATOR_BOT_TOKEN}
      QUOTE_GENERATOR_QUEUE_URL: ${construct:quote-generator.queueUrl}
      TELEGRAM_MEDIA_CONVERT_BOT_TOKEN: ${env:TELEGRAM_MEDIA_CONVERT_BOT_TOKEN}
      TELEGRAM_MEDIA_CONVERT_QUEUE_URL: ${construct:telegram-media-convert.queueUrl}
    events:
      - httpApi:
          path: /${env:SERVICE_SECRET}/{botId}/{botToken}
          method: post
  quote-generator-renderer:
    handler: bots/quote-generator/src/renderer.handler
    memorySize: 1536
    environment:
      ASSETS_BASE_URL: https://${env:SERVICE_NAME}-assets.s3.amazonaws.com
    events:
      - httpApi:
          path: /quote-generator/render
          method: get
    layers:
      - { Ref: ChromiumLambdaLayer }
      - { Ref: SharpLambdaLayer }
    package:
      patterns:
        - 'bots/quote-generator/templates/**'
  wotd:
    handler: bots/wotd/src/index.handler
    environment:
      BOT_TOKEN: ${env:WOTD_BOT_TOKEN}
      DYNAMODB_CACHE_TABLE: ${env:SERVICE_NAME}-cache
      CHAT_IDS_ALLOWLIST: ${env:WOTD_CHAT_IDS_ALLOWLIST}
      GOOGLE_CUSTOM_SEARCH_API_KEY: ${env:GOOGLE_CUSTOM_SEARCH_API_KEY}
      GOOGLE_CUSTOM_SEARCH_CX: ${env:GOOGLE_CUSTOM_SEARCH_CX}
    events:
      - schedule:
          method: scheduler
          rate: cron(1 18 * * ? *)
          timezone: Europe/Rome

constructs:
  chattgb:
    type: queue
    worker:
      handler: bots/chattgb/src/index.handler
      timeout: 120
      memorySize: 1536
      environment:
        BOT_TOKEN: ${env:CHATTGB_BOT_TOKEN}
        DYNAMODB_CACHE_TABLE: ${env:SERVICE_NAME}-cache
        CHAT_IDS_ALLOWLIST: ${env:CHATTGB_CHAT_IDS_ALLOWLIST}
        ADMIN_USER_IDS: ${env:CHATTGB_ADMIN_USER_IDS}
        OPENAI_API_KEY: ${env:OPENAI_API_KEY}
      layers:
        - { Ref: FfmpegLambdaLayer }
        - { Ref: SharpLambdaLayer }
  dabbext:
    type: queue
    worker:
      handler: bots/dabbext/src/index.handler
      environment:
        BOT_TOKEN: ${env:DABBEXT_BOT_TOKEN}
      package:
        patterns:
          - 'bots/dabbext/static/**'
  quote-generator:
    type: queue
    worker:
      handler: bots/quote-generator/src/index.handler
      timeout: 120
      memorySize: 1536
      environment:
        ASSETS_BASE_URL: https://${env:SERVICE_NAME}-assets.s3.amazonaws.com
        RENDERER_PATH: /quote-generator/render
        BOT_TOKEN: ${env:QUOTE_GENERATOR_BOT_TOKEN}
        GCLOUD_PROJECT_ID: ${env:GCLOUD_PROJECT_ID}
        GCLOUD_CLIENT_EMAIL: ${env:QUOTE_GENERATOR_GCLOUD_CLIENT_EMAIL}
        GCLOUD_PRIVATE_KEY: ${env:QUOTE_GENERATOR_GCLOUD_PRIVATE_KEY}
        UNSPLASH_ACCESS_KEY: ${env:QUOTE_GENERATOR_UNSPLASH_ACCESS_KEY}
      events:
        - httpApi:
            path: /bot${env:QUOTE_GENERATOR_BOT_TOKEN}
            method: post
      layers:
        - { Ref: ChromiumLambdaLayer }
        - { Ref: FfmpegLambdaLayer }
      package:
        patterns:
          - 'bots/quote-generator/templates/**'
  telegram-media-convert:
    type: queue
    worker:
      handler: bots/telegram-media-convert/src/index.handler
      timeout: 120
      memorySize: 1536
      environment:
        ASSETS_BASE_URL: https://${env:SERVICE_NAME}-assets.s3.amazonaws.com
        BOT_TOKEN: ${env:TELEGRAM_MEDIA_CONVERT_BOT_TOKEN}
      events:
        - httpApi:
            path: /bot${env:TELEGRAM_MEDIA_CONVERT_BOT_TOKEN}
            method: post
      layers:
        - { Ref: FfmpegLambdaLayer }
        - { Ref: SharpLambdaLayer }
      package:
        patterns:
          - 'bots/telegram-media-convert/static/**'

resources:
  Resources:
    # The bucket used to store assets
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:SERVICE_NAME}-assets
        AccessControl: PublicRead
    # The cache table used by bots to store data that should persist across executions
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:SERVICE_NAME}-cache
        AttributeDefinitions:
          - AttributeName: botToken
            AttributeType: S
          # NOTE: this is not needed, but it's added here for completeness
          # - AttributeName: val
          #   AttributeType: M
        KeySchema:
          - AttributeName: botToken
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
