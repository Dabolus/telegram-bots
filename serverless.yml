org: dabolus
app: ${env:SERVICE_NAME}
service: ${env:SERVICE_NAME}
frameworkVersion: '2 || 3'
useDotenv: true
variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  memorySize: 768
  lambdaHashingVersion: 20201221
  timeout: 10
  environment:
    NODE_OPTIONS: --enable-source-maps
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
          - CacheTable
          - Arn

plugins:
  - serverless-esbuild
  - serverless-s3-sync

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    plugins: esbuild-plugins.cjs
    packager: yarn
    exclude:
      - aws-sdk
      - chrome-aws-lambda
      - puppeteer-core
      - sharp
      - aws-sdk
  s3Sync:
    - bucketName: ${env:SERVICE_NAME}-assets
      localDir: assets
      acl: public-read

package:
  individually: true
  # TODO: discover why this isn't working at function level (1/3)
  patterns:
    - 'bots/quote-generator/templates/**'
    - 'bots/telegram-media-convert/static/**'

layers:
  ffmpeg:
    path: layers/ffmpeg/build
  sharp:
    path: layers/sharp/build

functions:
  dabbext:
    handler: bots/dabbext/src/index.handler
    environment:
      BOT_TOKEN: ${env:DABBEXT_BOT_TOKEN}
    events:
      - httpApi:
          path: /bot${env:DABBEXT_BOT_TOKEN}
          method: post
  quote-generator:
    handler: bots/quote-generator/src/index.handler
    memorySize: 1536
    environment:
      ASSETS_BASE_URL: https://${env:SERVICE_NAME}-assets.s3.amazonaws.com
      BOT_TOKEN: ${env:QUOTE_GENERATOR_BOT_TOKEN}
    events:
      - httpApi:
          path: /bot${env:QUOTE_GENERATOR_BOT_TOKEN}
          method: post
    layers:
      - arn:aws:lambda:us-east-1:764866452798:layer:chrome-aws-lambda:25
    # TODO: discover why this isn't working at function level (2/3)
    # package:
    #   patterns:
    #     - 'bots/quote-generator/templates/**'
  quote-generator-renderer:
    handler: bots/quote-generator/src/renderer.handler
    memorySize: 1536
    environment:
      ASSETS_BASE_URL: https://${env:SERVICE_NAME}-assets.s3.amazonaws.com
    events:
      - httpApi:
          path: /quote-generator/render
          method: get
    layers:
      - arn:aws:lambda:us-east-1:764866452798:layer:chrome-aws-lambda:25
      - { Ref: SharpLambdaLayer }
  telegram-media-convert:
    handler: bots/telegram-media-convert/src/index.handler
    memorySize: 1536
    timeout: 20
    environment:
      ASSETS_BASE_URL: https://${env:SERVICE_NAME}-assets.s3.amazonaws.com
      BOT_TOKEN: ${env:TELEGRAM_MEDIA_CONVERT_BOT_TOKEN}
    events:
      - httpApi:
          path: /bot${env:TELEGRAM_MEDIA_CONVERT_BOT_TOKEN}
          method: post
    layers:
      - { Ref: FfmpegLambdaLayer }
      - { Ref: SharpLambdaLayer }
    # TODO: discover why this isn't working at function level (3/3)
    # package:
    #   patterns:
    #     - 'bots/telegram-media-convert/static/**'
  wotd:
    handler: bots/wotd/src/index.handler
    environment:
      BOT_TOKEN: ${env:WOTD_BOT_TOKEN}
      DYNAMODB_CACHE_TABLE: ${env:SERVICE_NAME}-cache
      CHAT_IDS_ALLOWLIST: ${env:WOTD_CHAT_IDS_ALLOWLIST}
      GOOGLE_CUSTOM_SEARCH_API_KEY: ${env:GOOGLE_CUSTOM_SEARCH_API_KEY}
      GOOGLE_CUSTOM_SEARCH_CX: ${env:GOOGLE_CUSTOM_SEARCH_CX}
    events:
      # TODO: replace all these schedules with the commented one + serverless-local-schedule once it gets support for Serverless 3
      # See: https://github.com/serverless/serverless-local-schedule/issues/20
      # - schedule:
      #     rate: cron(1 18 * * ? *)
      #     timezone: Europe/Rome
      - schedule:
          rate: cron(1 17 * 1-2,11-12 ? *)
      - schedule:
          rate: cron(1 17 1-27 3 ? *)
      - schedule:
          rate: cron(1 16 28-31 3 ? *)
      - schedule:
          rate: cron(1 16 * 4-9 ? *)
      - schedule:
          rate: cron(1 16 1-30 10 ? *)
      - schedule:
          rate: cron(1 17 31 10 ? *)

resources:
  Resources:
    # The bucket used to store assets
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:SERVICE_NAME}-assets
        AccessControl: PublicRead
    # The cache table used by bots to store data that should persist across executions
    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:SERVICE_NAME}-cache
        AttributeDefinitions:
          - AttributeName: botToken
            AttributeType: S
          # NOTE: this is not needed, but it's added here for completeness
          # - AttributeName: val
          #   AttributeType: M
        KeySchema:
          - AttributeName: botToken
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
